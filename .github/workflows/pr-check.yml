name: Pull Request Check

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.0'

jobs:
  # Kiểm tra format và style code
  code-style:
    name: Code Style Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check code formatting
        run: |
          cd apps/server
          pnpm format:check
          
          cd ../web
          pnpm format:check

      - name: Lint backend
        run: |
          cd apps/server
          pnpm lint

      - name: Lint frontend
        run: |
          cd apps/web
          pnpm lint

  # Kiểm tra type safety
  type-check:
    name: Type Safety Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check backend
        run: |
          cd apps/server
          pnpm build

      - name: Type check frontend
        run: |
          cd apps/web
          pnpm build

  # Kiểm tra dependencies
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          pnpm outdated || echo "No outdated dependencies found"

      - name: Check for unused dependencies
        run: |
          cd apps/server
          pnpm depcheck || echo "No unused dependencies found"
          
          cd ../web
          pnpm depcheck || echo "No unused dependencies found"

  # Kiểm tra security
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level moderate
          cd apps/server && pnpm audit --audit-level moderate
          cd ../web && pnpm audit --audit-level moderate

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}

  # Kiểm tra test coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "MONGO_URI=mongodb://localhost:27017/sprintflow_test" >> $GITHUB_ENV
          echo "APP_SECRET=test_secret_key_for_ci_cd" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE=1h" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Run backend tests with coverage
        run: |
          cd apps/server
          pnpm test:cov
        env:
          MONGO_URI: mongodb://localhost:27017/sprintflow_test
          APP_SECRET: test_secret_key_for_ci_cd

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/server/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: |
          cd apps/server
          # Check if coverage is above 80%
          COVERAGE=$(cat coverage/lcov.info | grep -E "SF:|LF:|LH:" | awk 'NR%3==1 {files++} NR%3==2 {lines+=int($2)} NR%3==0 {hits+=int($2)} END {print int((hits/lines)*100)}')
          echo "Coverage: $COVERAGE%"
          if [ "$COVERAGE" -lt 80 ]; then
            echo "❌ Test coverage is below 80% (current: $COVERAGE%)"
            exit 1
          else
            echo "✅ Test coverage is above 80% (current: $COVERAGE%)"
          fi

  # Kiểm tra build
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend
        run: |
          cd apps/server
          pnpm build

      - name: Build frontend
        run: |
          cd apps/web
          pnpm build

      - name: Check build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la apps/server/dist/
          ls -la apps/web/.next/

  # Tạo PR comment với kết quả
  pr-comment:
    name: Create PR Comment
    runs-on: ubuntu-latest
    needs: [code-style, type-check, dependency-check, security-check, test-coverage, build-check]
    if: always()

    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            const conclusion = Object.values(jobs).every(job => job.result === 'success') ? 'success' : 'failure';
            
            let comment = `## 🔍 PR Quality Check Results\n\n`;
            comment += `**Overall Status:** ${conclusion === 'success' ? '✅ PASSED' : '❌ FAILED'}\n\n`;
            
            comment += `### 📋 Check Results\n`;
            comment += `| Check | Status |\n`;
            comment += `|-------|--------|\n`;
            
            Object.entries(jobs).forEach(([jobName, job]) => {
              const status = job.result === 'success' ? '✅ PASSED' : '❌ FAILED';
              comment += `| ${jobName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${status} |\n`;
            });
            
            comment += `\n### 📝 Next Steps\n`;
            if (conclusion === 'success') {
              comment += `✅ All checks passed! This PR is ready for review.\n`;
              comment += `- Code style: ✅\n`;
              comment += `- Type safety: ✅\n`;
              comment += `- Dependencies: ✅\n`;
              comment += `- Security: ✅\n`;
              comment += `- Test coverage: ✅\n`;
              comment += `- Build: ✅\n`;
            } else {
              comment += `❌ Some checks failed. Please fix the issues before merging.\n`;
              comment += `- Check the logs above for detailed error messages\n`;
              comment += `- Fix the issues and push new commits\n`;
              comment += `- The checks will run automatically on new commits\n`;
            }
            
            comment += `\n---\n*This comment was automatically generated by the CI/CD pipeline.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 