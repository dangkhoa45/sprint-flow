name: Auto-Check Issues Based on Code Changes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  analyze-changes-and-update-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better change detection
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd apps/server && npm ci
          cd ../web && npm ci
      
      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare with base branch
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          else
            # For pushes, compare with previous commit
            git diff --name-only HEAD~1...HEAD > changed_files.txt
          fi
          
          # Get list of added/modified files
          echo "Changed files:"
          cat changed_files.txt
          
          # Create JSON array of changed files
          echo "changed_files_json=$(cat changed_files.txt | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      
      - name: Analyze code changes
        id: analyze
        run: |
          # Read the task mapping configuration
          TASK_MAPPING=$(cat .github/task-mapping.json)
          
          # Get changed files
          CHANGED_FILES=$(cat changed_files.txt)
          
          # Initialize arrays for completed and new tasks
          COMPLETED_TASKS=()
          NEW_TASKS=()
          
          # Analyze each changed file
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "Analyzing file: $file"
              
              # Check if file matches any task patterns
              TASK_MATCHES=$(echo "$TASK_MAPPING" | jq -r --arg file "$file" '
                .tasks[] | 
                select(.patterns[] | test($file)) | 
                .task_id
              ')
              
              if [ -n "$TASK_MATCHES" ]; then
                echo "Found matching tasks for $file: $TASK_MATCHES"
                COMPLETED_TASKS+=("$TASK_MATCHES")
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          # Remove duplicates and create JSON arrays
          COMPLETED_UNIQUE=$(printf '%s\n' "${COMPLETED_TASKS[@]}" | sort -u | jq -R -s -c 'split("\n")[:-1]')
          NEW_UNIQUE=$(printf '%s\n' "${NEW_TASKS[@]}" | sort -u | jq -R -s -c 'split("\n")[:-1]')
          
          echo "completed_tasks=$COMPLETED_UNIQUE" >> $GITHUB_OUTPUT
          echo "new_tasks=$NEW_UNIQUE" >> $GITHUB_OUTPUT
          
          echo "Completed tasks: $COMPLETED_UNIQUE"
          echo "New tasks: $NEW_UNIQUE"
      
      - name: Update issues with completed tasks
        if: steps.analyze.outputs.completed_tasks != '[]'
        run: |
          COMPLETED_TASKS='${{ steps.analyze.outputs.completed_tasks }}'
          
          # Read task mapping to get issue numbers
          TASK_MAPPING=$(cat .github/task-mapping.json)
          
          # Process each completed task
          echo "$COMPLETED_TASKS" | jq -r '.[]' | while read -r task_id; do
            # Get issue number for this task
            ISSUE_NUMBER=$(echo "$TASK_MAPPING" | jq -r --arg task_id "$task_id" '
              .tasks[] | 
              select(.task_id == $task_id) | 
              .issue_number
            ')
            
            if [ -n "$ISSUE_NUMBER" ] && [ "$ISSUE_NUMBER" != "null" ]; then
              echo "Updating issue #$ISSUE_NUMBER for task: $task_id"
              
              # Get current issue body
              CURRENT_BODY=$(gh issue view "$ISSUE_NUMBER" --json body --jq '.body')
              
              # Update the specific checkbox for this task
              UPDATED_BODY=$(echo "$CURRENT_BODY" | sed "s/- \[ \] $task_id/- [x] $task_id/")
              
              # Update the issue
              gh issue edit "$ISSUE_NUMBER" --body "$UPDATED_BODY"
              
              echo "âœ… Checked task '$task_id' in issue #$ISSUE_NUMBER"
            fi
          done
      
      - name: Add comment to PR with analysis
        if: github.event_name == 'pull_request'
        run: |
          COMPLETED_COUNT=$(echo '${{ steps.analyze.outputs.completed_tasks }}' | jq 'length')
          NEW_COUNT=$(echo '${{ steps.analyze.outputs.new_tasks }}' | jq 'length')
          
          COMMENT="## ðŸ¤– Auto-Analysis Results
          
          **Changed files:** ${{ steps.changed-files.outputs.changed_files_json }}
          
          **Tasks completed:** $COMPLETED_COUNT
          **New tasks detected:** $NEW_COUNT
          
          ### Completed Tasks:
          $(echo '${{ steps.analyze.outputs.completed_tasks }}' | jq -r '.[]' | sed 's/^/- âœ… /')
          
          ### New Tasks Detected:
          $(echo '${{ steps.analyze.outputs.new_tasks }}' | jq -r '.[]' | sed 's/^/- ðŸ”„ /')
          
          ---
          *This analysis was performed automatically by CI/CD*"
          
          gh pr comment "${{ github.event.pull_request.number }}" --body "$COMMENT"
      
      - name: Create summary report
        run: |
          echo "## ðŸ“Š Auto-Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files changed:** $(echo '${{ steps.changed-files.outputs.changed_files_json }}' | jq 'length')" >> $GITHUB_STEP_SUMMARY
          echo "**Tasks completed:** $(echo '${{ steps.analyze.outputs.completed_tasks }}' | jq 'length')" >> $GITHUB_STEP_SUMMARY
          echo "**New tasks detected:** $(echo '${{ steps.analyze.outputs.new_tasks }}' | jq 'length')" >> $GITHUB_STEP_SUMMARY 