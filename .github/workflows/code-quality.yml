name: Advanced Code Quality

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.0'

jobs:
  # SonarQube analysis
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "MONGO_URI=mongodb://localhost:27017/sprintflow_test" >> $GITHUB_ENV
          echo "APP_SECRET=test_secret_key_for_ci_cd" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE=1h" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Run backend tests with coverage
        run: |
          cd apps/server
          pnpm test:cov
        env:
          MONGO_URI: mongodb://localhost:27017/sprintflow_test
          APP_SECRET: test_secret_key_for_ci_cd

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scannerHomeDir: /opt/sonar-scanner
          args: >
            -Dsonar.projectKey=sprintflow
            -Dsonar.sources=apps/server/src,apps/web/app,apps/web/components,apps/web/hooks,apps/web/lib,apps/web/utils
            -Dsonar.tests=apps/server/test,apps/web/__tests__
            -Dsonar.javascript.lcov.reportPaths=apps/server/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.spec.ts,**/*.test.ts,**/*.e2e-spec.ts
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts,**/*.e2e-spec.ts

  # Code complexity analysis
  complexity-check:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install complexity tools
        run: |
          npm install -g complexity-report
          npm install -g plato

      - name: Analyze backend complexity
        run: |
          cd apps/server
          complexity-report src/ --format json > complexity-report.json
          
          # Check for high complexity functions
          COMPLEXITY=$(node -e "
            const report = require('./complexity-report.json');
            const highComplexity = report.filter(f => f.complexity > 10);
            if (highComplexity.length > 0) {
              console.log('High complexity functions found:');
              highComplexity.forEach(f => console.log(\`- \${f.name}: \${f.complexity}\`));
              process.exit(1);
            }
            console.log('✅ No high complexity functions found');
          ")

      - name: Analyze frontend complexity
        run: |
          cd apps/web
          complexity-report app/ components/ hooks/ lib/ utils/ --format json > complexity-report.json
          
          # Check for high complexity functions
          COMPLEXITY=$(node -e "
            const report = require('./complexity-report.json');
            const highComplexity = report.filter(f => f.complexity > 10);
            if (highComplexity.length > 0) {
              console.log('High complexity functions found:');
              highComplexity.forEach(f => console.log(\`- \${f.name}: \${f.complexity}\`));
              process.exit(1);
            }
            console.log('✅ No high complexity functions found');
          ")

  # Performance analysis
  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: |
          cd apps/web
          pnpm build

      - name: Analyze bundle size
        run: |
          cd apps/web
          npx @next/bundle-analyzer .next/static/chunks --out-dir bundle-analysis
          
          # Check bundle size
          BUNDLE_SIZE=$(du -sh .next/static/chunks | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Alert if bundle is too large
          if [ "$BUNDLE_SIZE" > "5M" ]; then
            echo "⚠️ Bundle size is larger than 5MB"
            exit 1
          fi

      - name: Check for memory leaks
        run: |
          cd apps/server
          # Run tests with memory profiling
          node --max-old-space-size=512 --expose-gc -e "
            const { spawn } = require('child_process');
            const test = spawn('pnpm', ['test'], { stdio: 'inherit' });
            test.on('close', (code) => {
              global.gc();
              const memUsage = process.memoryUsage();
              console.log('Memory usage:', memUsage);
              if (memUsage.heapUsed > 100 * 1024 * 1024) {
                console.log('⚠️ High memory usage detected');
                process.exit(1);
              }
              process.exit(code);
            });
          "

  # Security analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Build server for ZAP scan
        run: |
          cd apps/server
          pnpm build

      - name: Install wait-on
        run: pnpm add -g wait-on

      - name: Start server in background for ZAP scan
        run: |
          cd apps/server
          pnpm start:prod &
        env:
          MONGO_URI: mongodb://localhost:27017/sprintflow_test
          APP_SECRET: test_secret_key_for_ci_cd
          NODE_ENV: test

      - name: Wait for server to be ready
        run: wait-on http://localhost:8005 --timeout 60000

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8005'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Check for hardcoded secrets
        run: |
          # Use gitleaks to check for secrets
          docker run --rm -v ${PWD}:/path zricethezav/gitleaks:latest detect --source="/path" --report="/path/gitleaks-report.json"
          
          if [ -f gitleaks-report.json ]; then
            echo "❌ Secrets found in code:"
            cat gitleaks-report.json
            exit 1
          else
            echo "✅ No secrets found in code"
          fi

  # Documentation check
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README completeness
        run: |
          # Check if README exists and has required sections
          if [ ! -f README.md ]; then
            echo "❌ README.md not found"
            exit 1
          fi
          
          # Check for required sections
          REQUIRED_SECTIONS=("Installation" "Usage" "API" "Contributing")
          for section in "${REQUIRED_SECTIONS[@]}"; do
            if ! grep -q "## $section" README.md; then
              echo "❌ Missing section: $section"
              exit 1
            fi
          done
          
          echo "✅ README.md is complete"

      - name: Check API documentation
        run: |
          cd apps/server
          # Check if Swagger docs are generated
          pnpm build
          
          if [ ! -f dist/main.js ]; then
            echo "❌ API documentation not generated"
            exit 1
          fi
          
          echo "✅ API documentation is available"

      - name: Check code comments
        run: |
          # Check for functions without JSDoc comments
          BACKEND_FUNCTIONS=$(find apps/server/src -name "*.ts" -exec grep -l "export.*function\|export.*class" {} \; | wc -l)
          BACKEND_COMMENTS=$(find apps/server/src -name "*.ts" -exec grep -l "/\*\*\|///" {} \; | wc -l)
          
          FRONTEND_FUNCTIONS=$(find apps/web -name "*.tsx" -o -name "*.ts" | xargs grep -l "export.*function\|export.*class" | wc -l)
          FRONTEND_COMMENTS=$(find apps/web -name "*.tsx" -o -name "*.ts" | xargs grep -l "/\*\*\|///" | wc -l)
          
          BACKEND_RATIO=$((BACKEND_COMMENTS * 100 / BACKEND_FUNCTIONS))
          FRONTEND_RATIO=$((FRONTEND_COMMENTS * 100 / FRONTEND_FUNCTIONS))
          
          echo "Backend documentation ratio: $BACKEND_RATIO%"
          echo "Frontend documentation ratio: $FRONTEND_RATIO%"
          
          if [ $BACKEND_RATIO -lt 80 ] || [ $FRONTEND_RATIO -lt 60 ]; then
            echo "❌ Documentation coverage is too low"
            exit 1
          fi
          
          echo "✅ Documentation coverage is adequate"

  # Accessibility check
  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: |
          cd apps/web
          pnpm build

      - name: Run accessibility tests
        run: |
          cd apps/web
          # Install and run axe-core for accessibility testing
          npm install -g axe-core
          
          # Check for accessibility issues in components
          find . -name "*.tsx" -exec node -e "
            const fs = require('fs');
            const content = fs.readFileSync(process.argv[1], 'utf8');
            const issues = [];
            
            // Check for missing alt attributes
            if (content.includes('<img') && !content.includes('alt=')) {
              issues.push('Missing alt attribute on img tag');
            }
            
            // Check for missing aria labels
            if (content.includes('aria-label=') && !content.includes('aria-label=\\"')) {
              issues.push('Missing or empty aria-label');
            }
            
            // Check for proper heading structure
            const headings = content.match(/<h[1-6][^>]*>/g) || [];
            const headingLevels = headings.map(h => parseInt(h.match(/<h([1-6])/)[1]));
            for (let i = 1; i < headingLevels.length; i++) {
              if (headingLevels[i] - headingLevels[i-1] > 1) {
                issues.push('Skipped heading level');
                break;
              }
            }
            
            if (issues.length > 0) {
              console.log('Accessibility issues in ' + process.argv[1] + ':');
              issues.forEach(issue => console.log('- ' + issue));
              process.exit(1);
            }
          " {} \;

      - name: Check color contrast
        run: |
          cd apps/web
          # Check for color contrast issues
          find . -name "*.tsx" -exec node -e "
            const fs = require('fs');
            const content = fs.readFileSync(process.argv[1], 'utf8');
            
            // Check for hardcoded colors that might have contrast issues
            const colorPatterns = [
              /#[0-9a-fA-F]{3,6}/g,
              /rgb\([^)]+\)/g,
              /rgba\([^)]+\)/g
            ];
            
            colorPatterns.forEach(pattern => {
              const matches = content.match(pattern);
              if (matches) {
                console.log('Found colors in ' + process.argv[1] + ':');
                matches.forEach(color => console.log('- ' + color));
              }
            });
          " {} \;

  # Generate quality report
  quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [sonarqube, complexity-check, performance-check, security-analysis, documentation-check, accessibility-check]
    if: always()
    
    steps:
      - name: Generate comprehensive quality report
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            const allPassed = Object.values(jobs).every(job => job.result === 'success');
            
            let report = `## 🔍 Comprehensive Code Quality Report\n\n`;
            report += `**Overall Quality Score:** ${allPassed ? '✅ EXCELLENT' : '⚠️ NEEDS IMPROVEMENT'}\n\n`;
            
            report += `### 📊 Quality Metrics\n`;
            report += `| Metric | Status | Details |\n`;
            report += `|--------|--------|---------|\n`;
            
            Object.entries(jobs).forEach(([jobName, job]) => {
              const status = job.result === 'success' ? '✅ PASSED' : '❌ FAILED';
              const details = job.result === 'success' ? 'All checks passed' : 'Issues detected';
              report += `| ${jobName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${status} | ${details} |\n`;
            });
            
            report += `\n### 🎯 Recommendations\n`;
            if (allPassed) {
              report += `✅ Code quality is excellent! Keep up the good work.\n`;
              report += `- Consider adding more unit tests for edge cases\n`;
              report += `- Monitor performance metrics in production\n`;
              report += `- Regular security audits are recommended\n`;
            } else {
              report += `⚠️ Some quality issues were detected:\n`;
              report += `- Review failed checks above\n`;
              report += `- Address security vulnerabilities first\n`;
              report += `- Improve test coverage if needed\n`;
              report += `- Consider code refactoring for complex functions\n`;
            }
            
            report += `\n### 📈 Quality Trends\n`;
            report += `- Code coverage: Target 80%+\n`;
            report += `- Cyclomatic complexity: Target <10 per function\n`;
            report += `- Bundle size: Target <5MB\n`;
            report += `- Security vulnerabilities: Target 0\n`;
            
            report += `\n---\n*This report was automatically generated by the CI/CD pipeline.*`;
            
            // Create issue comment if this is a PR
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }
            
            // Create summary for workflow
            console.log(report); 