name: Branch Protection Setup

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to protect'
        required: true
        default: 'main'
      require_reviews:
        description: 'Require pull request reviews'
        required: true
        default: true
      required_approving_review_count:
        description: 'Number of required approving reviews'
        required: true
        default: 2
      dismiss_stale_reviews:
        description: 'Dismiss stale reviews when new commits are pushed'
        required: true
        default: true
      require_status_checks:
        description: 'Require status checks to pass before merging'
        required: true
        default: true
      require_branches_to_be_up_to_date:
        description: 'Require branches to be up to date before merging'
        required: true
        default: true
      enforce_admins:
        description: 'Enforce restrictions for administrators'
        required: true
        default: true
      allow_force_pushes:
        description: 'Allow force pushes'
        required: true
        default: false
      allow_deletions:
        description: 'Allow deletions'
        required: true
        default: false

jobs:
  setup-branch-protection:
    name: Setup Branch Protection
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup branch protection
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ github.event.inputs.branch }}';
            const requireReviews = ${{ github.event.inputs.require_reviews }};
            const requiredApprovingReviewCount = parseInt('${{ github.event.inputs.required_approving_review_count }}');
            const dismissStaleReviews = ${{ github.event.inputs.dismiss_stale_reviews }};
            const requireStatusChecks = ${{ github.event.inputs.require_status_checks }};
            const requireBranchesToBeUpToDate = ${{ github.event.inputs.require_branches_to_be_up_to_date }};
            const enforceAdmins = ${{ github.event.inputs.enforce_admins }};
            const allowForcePushes = ${{ github.event.inputs.allow_force_pushes }};
            const allowDeletions = ${{ github.event.inputs.allow_deletions }};
            
            // Required status checks
            const requiredStatusChecks = [
              'quality-check',
              'security-check',
              'build-and-test',
              'code-style',
              'type-check',
              'test-coverage',
              'build-check'
            ];
            
            try {
              await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch,
                required_status_checks: requireStatusChecks ? {
                  strict: requireBranchesToBeUpToDate,
                  contexts: requiredStatusChecks
                } : null,
                enforce_admins: enforceAdmins,
                required_pull_request_reviews: requireReviews ? {
                  required_approving_review_count: requiredApprovingReviewCount,
                  dismiss_stale_reviews: dismissStaleReviews,
                  require_code_owner_reviews: true,
                  require_last_push_approval: true
                } : null,
                restrictions: null,
                allow_force_pushes: allowForcePushes,
                allow_deletions: allowDeletions,
                block_creations: false,
                required_conversation_resolution: true
              });
              
              console.log(`‚úÖ Branch protection rules set up successfully for ${branch}`);
              
              // Create a summary comment
              const summary = `## üõ°Ô∏è Branch Protection Rules Applied
              
              **Branch:** \`${branch}\`
              **Applied at:** ${new Date().toISOString()}
              
              ### üìã Protection Rules
              - **Required Reviews:** ${requireReviews ? '‚úÖ Yes' : '‚ùå No'}
              - **Required Approving Reviews:** ${requiredApprovingReviewCount}
              - **Dismiss Stale Reviews:** ${dismissStaleReviews ? '‚úÖ Yes' : '‚ùå No'}
              - **Status Checks Required:** ${requireStatusChecks ? '‚úÖ Yes' : '‚ùå No'}
              - **Branches Must Be Up To Date:** ${requireBranchesToBeUpToDate ? '‚úÖ Yes' : '‚ùå No'}
              - **Enforce for Admins:** ${enforceAdmins ? '‚úÖ Yes' : '‚ùå No'}
              - **Allow Force Pushes:** ${allowForcePushes ? '‚úÖ Yes' : '‚ùå No'}
              - **Allow Deletions:** ${allowDeletions ? '‚úÖ Yes' : '‚ùå No'}
              
              ### üîí Required Status Checks
              ${requiredStatusChecks.map(check => `- \`${check}\``).join('\n')}
              
              ### üìù Next Steps
              1. All future PRs to \`${branch}\` must pass these checks
              2. At least ${requiredApprovingReviewCount} approving reviews required
              3. Code owner reviews are required
              4. Conversation resolution is required
              
              ---
              *Branch protection rules were automatically configured by the CI/CD pipeline.*`;
              
              console.log(summary);
              
            } catch (error) {
              console.error('‚ùå Failed to set up branch protection:', error.message);
              throw error;
            }

  # Auto-setup for main/master branches
  auto-setup-main-branch:
    name: Auto Setup Main Branch Protection
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Auto setup main branch protection
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            
            // Default protection rules for main/master
            const protectionRules = {
              required_status_checks: {
                strict: true,
                contexts: [
                  'quality-check',
                  'security-check', 
                  'build-and-test',
                  'code-style',
                  'type-check',
                  'test-coverage',
                  'build-check'
                ]
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 2,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                require_last_push_approval: true
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            };
            
            try {
              await github.rest.repos.updateBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch,
                ...protectionRules
              });
              
              console.log(`‚úÖ Auto-protection rules applied to ${branch}`);
              
            } catch (error) {
              console.log(`‚ÑπÔ∏è Branch protection already exists for ${branch} or insufficient permissions`);
            } 