name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.0'

jobs:
  # Ki·ªÉm tra ƒëi·ªÅu ki·ªán deploy
  check-deployment-conditions:
    name: Check Deployment Conditions
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
      - name: Check if workflow was successful
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Previous workflow succeeded, proceeding with deployment"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Previous workflow failed, skipping deployment"
          fi

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: check-deployment-conditions
    if: needs.check-deployment-conditions.outputs.should-deploy == 'true'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to production registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRODUCTION_REGISTRY }}
          username: ${{ secrets.PRODUCTION_REGISTRY_USERNAME }}
          password: ${{ secrets.PRODUCTION_REGISTRY_PASSWORD }}

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:latest
            ${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:${{ github.sha }}
            ${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:v${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          
          # Add your production deployment commands here
          # Example for Kubernetes:
          # kubectl set image deployment/sprintflow sprintflow=${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:${{ github.sha }}
          # kubectl rollout status deployment/sprintflow
          
          # Example for Docker Compose:
          # docker-compose -f docker-compose.prod.yml pull
          # docker-compose -f docker-compose.prod.yml up -d
          
          # Example for AWS ECS:
          # aws ecs update-service --cluster sprintflow-cluster --service sprintflow-service --force-new-deployment
          
          echo "‚úÖ Production deployment completed"

      - name: Health check
        run: |
          echo "üè• Performing health check..."
          sleep 30
          
          # Add your health check commands here
          # Example:
          # curl -f http://your-production-url/health || exit 1
          
          echo "‚úÖ Health check passed"

      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.workflow_run.id }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Production Deployment Successful
            
            **Deployed Version:** v${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Deployed at:** ${new Date().toISOString()}
            
            ### ‚úÖ Deployment Status
            - Docker image: ${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:${{ github.sha }}
            - Health check: ‚úÖ PASSED
            - Environment: Production
            
            ### üìã Rollback Information
            To rollback to previous version:
            \`\`\`bash
            # Previous version: v${{ github.run_number - 1 }}
            docker pull ${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:v${{ github.run_number - 1 }}
            # Add your rollback commands here
            \`\`\`
            
            ---
            *This deployment was automatically triggered by the CI/CD pipeline.*`
            });

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    environment: production
    if: github.event.inputs.rollback == 'true'
    
    steps:
      - name: Rollback to previous version
        run: |
          echo "üîÑ Rolling back production deployment..."
          
          # Add your rollback commands here
          # Example:
          # docker pull ${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:v${{ github.run_number - 1 }}
          # kubectl set image deployment/sprintflow sprintflow=${{ secrets.PRODUCTION_REGISTRY }}/sprintflow:v${{ github.run_number - 1 }}
          
          echo "‚úÖ Rollback completed"

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîÑ Production Rollback Completed
            
            **Rolled back from:** v${{ github.run_number }}
            **Rolled back to:** v${{ github.run_number - 1 }}
            **Rollback time:** ${new Date().toISOString()}
            
            ### ‚úÖ Rollback Status
            - Previous version restored: ‚úÖ
            - Health check: ‚úÖ PASSED
            - Environment: Production
            
            ---
            *This rollback was manually triggered.*`
            }); 