name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.11.0'

jobs:
  # Job kiá»ƒm tra code quality vÃ  testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "MONGO_URI=mongodb://localhost:27017/sprintflow_test" >> $GITHUB_ENV
          echo "APP_SECRET=test_secret_key_for_ci_cd" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE=1h" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Lint backend code
        run: |
          cd apps/server
          pnpm lint

      - name: Lint frontend code
        run: |
          cd apps/web
          pnpm lint

      - name: Type check backend
        run: |
          cd apps/server
          pnpm build

      - name: Type check frontend
        run: |
          cd apps/web
          pnpm build

      - name: Run backend tests
        run: |
          cd apps/server
          pnpm test:cov
        env:
          MONGO_URI: mongodb://localhost:27017/sprintflow_test
          APP_SECRET: test_secret_key_for_ci_cd

      - name: Run API tests
        run: |
          cd testing
          npm install
          npm test
        env:
          API_BASE_URL: http://localhost:8005
          TEST_USER_EMAIL: test@example.com
          TEST_USER_PASSWORD: testpassword

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/server/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Job kiá»ƒm tra security
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level moderate
          cd apps/server && pnpm audit --audit-level moderate
          cd ../web && pnpm audit --audit-level moderate

      - name: Run SAST scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job build vÃ  test integration
  build-and-test:
    name: Build & Integration Test
    runs-on: ubuntu-latest
    needs: [quality-check, security-check]

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "MONGO_URI=mongodb://localhost:27017/sprintflow_test" >> $GITHUB_ENV
          echo "APP_SECRET=test_secret_key_for_ci_cd" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE=1h" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Build backend
        run: |
          cd apps/server
          pnpm build

      - name: Build frontend
        run: |
          cd apps/web
          pnpm build

      - name: Start backend server
        run: |
          cd apps/server
          pnpm start:prod &
          sleep 10
        env:
          MONGO_URI: mongodb://localhost:27017/sprintflow_test
          APP_SECRET: test_secret_key_for_ci_cd

      - name: Run integration tests
        run: |
          cd testing
          npm install
          npm run test:integration
        env:
          API_BASE_URL: http://localhost:8005
          TEST_USER_EMAIL: test@example.com
          TEST_USER_PASSWORD: testpassword

  # Job deploy staging (khi merge vÃ o main/master)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, security-check, build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/sprintflow:staging
            ${{ secrets.DOCKER_USERNAME }}/sprintflow:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply, docker-compose, etc.

  # Job Ä‘Ã³ng issue tá»± Ä‘á»™ng
  close-issue:
    name: Close Related Issues
    runs-on: ubuntu-latest
    needs: [quality-check, security-check, build-and-test]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true

    steps:
      - name: Close related issues
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const issueNumbers = new Set();
            
            // Extract issue numbers from commit messages
            commits.forEach(commit => {
              const match = commit.commit.message.match(/(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi);
              if (match) {
                match.forEach(m => {
                  const issueNum = m.match(/#(\d+)/)[1];
                  issueNumbers.add(parseInt(issueNum));
                });
              }
            });

            // Close issues
            for (const issueNumber of issueNumbers) {
              try {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: 'closed',
                  labels: ['auto-closed', 'merged']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `âœ… This issue has been automatically closed because it was referenced in PR #${context.issue.number} which has been merged.\n\n**Merged by:** @${context.actor}\n**Merged at:** ${new Date().toISOString()}`
                });
                
                console.log(`Closed issue #${issueNumber}`);
              } catch (error) {
                console.log(`Failed to close issue #${issueNumber}:`, error.message);
              }
            }

  # Job táº¡o release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality-check, security-check, build-and-test, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## ðŸš€ SprintFlow Release v${{ github.run_number }}
            
            ### âœ… Quality Checks Passed
            - Code linting: âœ…
            - Type checking: âœ…
            - Unit tests: âœ…
            - Integration tests: âœ…
            - Security audit: âœ…
            - SAST scan: âœ…
            
            ### ðŸ“¦ What's included
            - Backend API improvements
            - Frontend UI enhancements
            - Bug fixes and optimizations
            - Security updates
            
            ### ðŸ”§ Deployment
            - Staging environment: âœ… Deployed
            - Docker image: `${{ secrets.DOCKER_USERNAME }}/sprintflow:${{ github.sha }}`
            
            ### ðŸ“‹ Changelog
            See the [commit history](https://github.com/${{ github.repository }}/compare/v${{ github.run_number - 1 }}...v${{ github.run_number }}) for detailed changes.
          draft: false
          prerelease: false 